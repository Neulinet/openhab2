// Generated by CoffeeScript 1.9.2
'use strict';
angular.module('ZooLib.directives.dimmerItem', []).directive('dimmerItem', function($log, $timeout, itemService, $rootScope, iconResolver) {
  var translateState, translateStateOnOff;
  translateState = function(state) {
    if (angular.isNumber(state)) {
      return state;
    }
    if (angular.isString(state)) {
      switch (state) {
        case 'ON':
          return 100;
        case 'OFF':
          return 0;
        default:
          return parseInt(state, 10);
      }
    } else {
      return 0;
    }
  };
  translateStateOnOff = function(state) {
    var stateNum;
    if (state === 'ON' || state === 'OFF') {
      return state;
    }
    stateNum = parseInt(state, 10);
    if (stateNum > 0) {
      return 'ON';
    } else {
      return 'OFF';
    }
  };
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'partials/directives/dimmerItem.html',
    scope: {
      item: '='
    },
    link: function(scope, elem, attrs) {
      var eventBuffer, handleBroadcast, options, ranger, updateItem, updateOpacity;
      eventBuffer = null;
      scope.local = {
        stateOnOff: translateStateOnOff(scope.item.state),
        dimValue: translateState(scope.item.state),
        opacity: .5
      };
      scope.options = {
        cctv: attrs.cctv != null
      };
      updateItem = function(newState) {
        scope.local.dimValue = translateState(newState);
        scope.local.stateOnOff = translateStateOnOff(newState);
        updateOpacity();
        ranger.setStart(scope.local.dimValue);
        return scope.options.cssIconClass = iconResolver(scope.item);
      };
      updateOpacity = function() {
        var newOpacity;
        newOpacity = scope.local.dimValue / 100;
        if (newOpacity < .1) {
          newOpacity = .1;
        }
        if (newOpacity > .9) {
          newOpacity = .9;
        }
        return scope.local.opacity = newOpacity;
      };
      options = {
        decimal: false,
        min: 0,
        max: 100,
        start: scope.local.dimValue
      };
      ranger = new Powerange($('.js-opacity', elem)[0], options);
      if (scope.options.cctv) {
        $('.popup-with-move-anim', elem).magnificPopup({
          type: 'inline',
          fixedContentPos: true,
          fixedBgPos: false,
          closeBtnInside: true,
          preloader: false,
          midClick: true,
          removalDelay: 300,
          mainClass: 'my-mfp-slide-bottom'
        });
      }
      scope.handleChangeSwitch = function() {
        $log.debug("Dimmer: Switching " + scope.item.name + " to " + scope.local.stateOnOff);
        return itemService.sendCommand({
          itemName: scope.item.name
        }, scope.local.stateOnOff);
      };
      scope.handleChangeSlider = function() {
        $timeout.cancel(eventBuffer);
        return eventBuffer = $timeout(function() {
          $log.debug("Dimmer: Change " + scope.item.name + " to " + scope.local.dimValue);
          return itemService.sendCommand({
            itemName: scope.item.name
          }, scope.local.dimValue);
        }, 100, false);
      };
      handleBroadcast = function(event, newState) {
        $log.debug("Dimmer: Command " + scope.item.name + " to " + newState);
        scope.item.state = newState;
        updateItem(newState);
        return $rootScope.$broadcast("updateMasterSwitch/" + scope.item.groupNames[0]);
      };
      scope.$watch('item', function(item) {
        if (item == null) {
          return;
        }
        updateItem(item.state);
        scope.$on("smarthome/command/" + item.name, handleBroadcast);
        return scope.$on("smarthome/update/" + item.name, handleBroadcast);
      });
    }
  };
});
