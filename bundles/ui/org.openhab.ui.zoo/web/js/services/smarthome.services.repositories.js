// Generated by CoffeeScript 1.9.2
'use strict';
angular.module('SmartHome.services.repositories', ['SmartHome.services.datacache']).factory('bindingRepository', function(DataCache, bindingService) {
  return DataCache.init(bindingService);
}).factory('thingTypeRepository', function(DataCache, thingTypeService) {
  return DataCache.init(thingTypeService);
}).factory('discoveryResultRepository', function(DataCache, inboxService, eventService) {
  DataCache.init(inboxService);
  eventService.onEvent('smarthome/inbox/added/*', function(topic, discoveryResult) {
    DataCache.add(discoveryResult);
  });
  return DataCache;
}).factory('thingRepository', function(DataCache, thingSetupService) {
  return DataCache.init(thingSetupService);
}).factory('homeGroupRepository', function(DataCache, groupSetupService) {
  return DataCache.init(groupSetupService);
}).factory('itemRepository', function(DataCache, itemService, $log, $q) {
  var GROUP_ROOMS, ItemRepository, TAG_CONSUMPTION, TAG_MASTER, TAG_ROOM;
  TAG_ROOM = 'room';
  TAG_MASTER = 'master-switch';
  GROUP_ROOMS = 'gRooms';
  TAG_CONSUMPTION = 'consumption';
  return new (ItemRepository = (function() {
    function ItemRepository() {
      DataCache.init(itemService);
      this.rooms = {};
      this.itemsActive = [];
    }

    ItemRepository.prototype.hasTag = function(item, tag) {
      var ref;
      return ((ref = item.tags) != null ? ref.indexOf(tag) : void 0) >= 0;
    };

    ItemRepository.prototype.hasGroup = function(item, group) {
      var ref;
      return ((ref = item.groupNames) != null ? ref.indexOf(group) : void 0) >= 0;
    };

    ItemRepository.prototype.getRooms = function(force) {
      var defered;
      defered = $q.defer();
      DataCache.getAll(force).then((function(_this) {
        return function(data) {
          _this.itemsActive = [];
          data.forEach(function(item) {
            if (item.type === 'GroupItem' && _this.hasGroup(item, GROUP_ROOMS) && !_this.hasTag(item, TAG_CONSUMPTION)) {
              return _this.rooms[item.name] = angular.copy(item);
            }
          });
          return defered.resolve(_this.rooms);
        };
      })(this));
      return defered.promise;
    };

    ItemRepository.prototype.getMasterSwitchFromGroup = function(group) {
      var members;
      if (!group) {
        return null;
      }
      members = group.map(function(member) {
        if (this.hasTag(member, TAG_MASTER)) {
          return member;
        }
      });
      if (members.length !== 1) {
        return $log.error("Group " + group.name + " has more than one member tagged as master!");
      } else {
        return members[0];
      }
    };

    return ItemRepository;

  })());
});
