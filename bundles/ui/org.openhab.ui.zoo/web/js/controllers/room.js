// Generated by CoffeeScript 1.9.2
'use strict';
angular.module('ZooLib.controllers.room', []).controller('RoomController', function(itemRepository, $log, $scope, $stateParams, $filter, $state, $q,$rootScope,itemService) {

  $rootScope.leftSidebarOpen = false;
  $rootScope.isBlackout = false;
 
  $scope.allRoomDisplay = {};
  this.rooms = {};
  this.scenes = [];
  this.newSceneDefault = {
    name: ''
  };

  $rootScope.console = console;
  /*$rootScope.console.log = function(content){
    console.log(content);
  };*/

  $rootScope.toggleSidebar = function () {
    $rootScope.leftSidebarOpen = !$rootScope.leftSidebarOpen;
    $rootScope.isBlackout = !$rootScope.isBlackout;
  };

  $scope.updateItem = function (rooms,item,newState) {

    angular.forEach(rooms, function(value,key){
      angular.forEach(value.members, function(subValue, subKey){
        if (subValue.name == item){
          subValue.state = newState;
        }
      });
    });

  }

  this.applyScene = function(items){
     console.log('Room: ',this.rooms);
    var rooms = this.rooms;
    console.log('Items: ',items);
    items.forEach(function(value, key,items){
      //console.log('value',value);
      //console.log('key',key);
      
      $scope.updateItem(rooms,value.name,value.state);
      $rootScope.$broadcast(value.name,value.state);
      itemService.sendCommand({itemName: value.name},value.state);
    });
    
  } 

  this.allItems={};
  this.newScene = {};

  this.saveNewScene = function(closeCallback) {
    var items;
    items = this.rooms[$state.params.room].members;
    console.log(this.rooms);
    if (this.scenes[this.newScene.name]) {
      $log.error("Scene " + this.newScene.name + " already exists.");
      return;
    }
    $log.debug("Saving scene for items:", items);
    return itemRepository.createNewScene(this.newScene.name, items).then((function(_this) {
      return function() {
        console.log(_this);
        _this.scenes.push({
          name: _this.newScene.name,
          items: angular.copy(items)
        });
        _this.newScene = angular.copy(_this.newSceneDefault);
        return closeCallback();
      };
    })(this));
  };
  this.refreshItems = function(force) {
    $log.debug('State params 1',$state.params);
    var roomsPromise, scenesPromise;
    roomsPromise = $q.defer();
    scenesPromise = $q.defer();
   
    itemRepository.getRooms(force).then((function(_this) {
      return function(rooms) {
        rooms['all'] = {'name':'all','label':'All','members':[]};
        $scope.thisRoom = rooms[$state.params.room];
            
   
        _this.rooms = $filter('orderBy')(rooms, 'label');
        
        return roomsPromise.resolve(rooms);
      };
    })(this));
    itemRepository.getScenes().then((function(_this) {
      $log.debug('_this inside defered',_this);
      $log.debug('this inside defered',this);

      return function(scenes) {

        $log.debug("loaded scenes", scenes);
        _this.scenes = scenes;
        $scope.customScenes = _this.scenes;
        return scenesPromise.resolve(scenes);
      };
    })(this));
    return $q.all(roomsPromise, scenesPromise);
  };
  //console.log("All items: %s",JSON.stringify(this.allItems));
  $scope.changeRoomMobile = function(room){
    //console.log(room);
    $state.go("rooms.room", {
      active: true,
      room: room.name
    });
  }

  this.refreshItems().then((function(_this) {
    return function() {
      var firstRoom;
      console.log('State ',$state)
      if (!$stateParams.room && (_this.rooms != null)) {
        firstRoom = Object.keys(_this.rooms).sort()[0];
        $log.debug("Initial redirect to room " + firstRoom);
        $scope.thisRoom = Object.keys(_this.rooms).sort()[0];
        $state.go("rooms.room", {
          active: true,
          room: firstRoom
        });
      }
    };
  })(this));
});
