// Generated by CoffeeScript 1.9.2
'use strict';
angular.module('ZooLib.controllers.room', []).controller('RoomController', function(itemRepository, $log, $scope, $stateParams, $filter, $state, $q) {
  this.rooms = {};
  this.scenes = [];
  this.newSceneDefault = {
    name: ''
  };
  this.newScene = {};
  this.saveNewScene = function(closeCallback) {
    var items;
    items = this.rooms[$state.params.room].members;
    if (this.scenes[this.newScene.name]) {
      $log.error("Scene " + this.newScene.name + " already exists.");
      return;
    }
    $log.debug("Saving scene for items:", items);
    return itemRepository.createNewScene(this.newScene.name, items).then((function(_this) {
      return function() {
        _this.scenes.push({
          name: _this.newScene.name,
          items: angular.copy(items)
        });
        _this.newScene = angular.copy(_this.newSceneDefault);
        return closeCallback();
      };
    })(this));
  };
  this.refreshItems = function(force) {
    var roomsPromise, scenesPromise;
    roomsPromise = $q.defer();
    scenesPromise = $q.defer();
    itemRepository.getRooms(force).then((function(_this) {
      return function(rooms) {
        $log.debug("loaded rooms", rooms);
        _this.rooms = $filter('orderBy')(rooms, 'label');
        return roomsPromise.resolve(rooms);
      };
    })(this));
    itemRepository.getScenes().then((function(_this) {
      return function(scenes) {
        $log.debug("loaded scenes", scenes);
        _this.scenes = scenes;
        return scenesPromise.resolve(scenes);
      };
    })(this));
    return $q.all(roomsPromise, scenesPromise);
  };
  this.refreshItems().then((function(_this) {
    return function() {
      var firstRoom;
      if (!$stateParams.room && (_this.rooms != null)) {
        firstRoom = Object.keys(_this.rooms).sort()[0];
        $log.debug("Initial redirect to room " + firstRoom);
        $state.go("rooms.room", {
          active: true,
          room: firstRoom
        });
      }
    };
  })(this));
});
